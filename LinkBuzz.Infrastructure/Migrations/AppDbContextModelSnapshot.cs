// <auto-generated />
using System;
using LinkBuzz.Infrastructure.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LinkBuzz.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.ChatMessageParticipantState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SeenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ChatMessageParticipantState");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMember")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MessageGroup");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageGroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool?>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("MessageGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessageGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageGroupMember");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageGroupReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsReact")
                        .HasColumnType("bit");

                    b.Property<long>("MessagesInGroupMessageId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReactType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessagesInGroupMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageGroupReaction");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsReact")
                        .HasColumnType("bit");

                    b.Property<int?>("ReactType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReaction");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessagesInGroupMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MessageGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessageGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("MessagesInGroupMessage");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.Participant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.AdminGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<long?>("PageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RefuseTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminGroup");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("int");

                    b.Property<int?>("PrivacySettings")
                        .HasColumnType("int");

                    b.Property<string>("ThumbNail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.GroupPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPined")
                        .HasColumnType("bit");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupPost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.JoinGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("JoinGroup");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.MemberGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("MemberGroup");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.ModGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<long?>("PageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RefuseTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("ModGroup");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.MuteMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminMuteId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsMute")
                        .HasColumnType("bit");

                    b.Property<long?>("ModMuteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MuteTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MuteTimeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("MuteMember");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.NotificationEntities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AdminMainId")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFollows")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("PageAdmin");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModId")
                        .HasColumnType("bigint");

                    b.Property<long>("PagePostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PagePostId");

                    b.ToTable("PageComment");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageLikeComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLikeCommentPostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserLikeCommentPostId");

                    b.ToTable("PageLikeComment");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageLikePost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLikePostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserLikePostId");

                    b.ToTable("PageLikePost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageMod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("PageMod");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PagePost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPined")
                        .HasColumnType("bit");

                    b.Property<long?>("ModId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PagePost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.Albumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPost")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Albumn");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsApproval")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfComments")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfShares")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTags")
                        .HasColumnType("int");

                    b.Property<int>("PrivacySettings")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.PostAlbumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AlbumnId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlbumnId");

                    b.HasIndex("PostId");

                    b.ToTable("PostAlbumn");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.PostShare", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShareTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostShare");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.TagUsersInPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("TagUsersInPost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserCommentPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CommentOfParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfLike")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRepComment")
                        .HasColumnType("int");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommentPost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserReactComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsReact")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReactTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReactType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReactComment");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserReactPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsReact")
                        .HasColumnType("bit");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReactTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReactType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReactPost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.StoryEntities.ReactStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReactType")
                        .HasColumnType("int");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReactStory");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.StoryEntities.Story", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfReact")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrivacySettings")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StoryTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.ConfirmEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConfirmCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmEmail");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.FriendShip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("AcceptTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("FriendShipStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RefuseTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserOneId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserTwoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FriendShipStatusId");

                    b.HasIndex("UserTwoId");

                    b.ToTable("FriendShip");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.FriendShipStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FriendShipStatus");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentResident")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfFollowers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfFriends")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPagesLiked")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfViolates")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrivacySettings")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RelationshipStatus")
                        .HasColumnType("int");

                    b.Property<string>("Story")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbNail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UnLockTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebsiteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserStatusId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ActivityDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserBlocked", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("BlockTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<long>("UserBlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserBlockId");

                    b.ToTable("UserBlocked");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevice");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserFollower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("FollowTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFollowed")
                        .HasColumnType("bit");

                    b.Property<long>("UserFollowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserFollowingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserFollowingId");

                    b.ToTable("UserFollower");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserRelationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSetRelationship")
                        .HasColumnType("bit");

                    b.Property<long>("RelatedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RelatedUserId");

                    b.ToTable("UserRelationship");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserViolate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool?>("IsViolated")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserViolate");
                });

            modelBuilder.Entity("ReactStoryStory", b =>
                {
                    b.Property<long>("ReactStoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoriesId")
                        .HasColumnType("bigint");

                    b.HasKey("ReactStoriesId", "StoriesId");

                    b.HasIndex("StoriesId");

                    b.ToTable("ReactStoryStory");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.ChatMessage", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.Conversation", "Conversation")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "Creator")
                        .WithMany("ChatMessages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.ChatMessageParticipantState", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.ChatMessage", "ChatMessage")
                        .WithMany("ChatMessageParticipantStates")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.Participant", "Participant")
                        .WithMany("ChatMessageParticipantStates")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.Conversation", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "Creator")
                        .WithMany("Conversations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageGroupMember", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.MessageGroup", "MessageGroup")
                        .WithMany("MessageGroupMembers")
                        .HasForeignKey("MessageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("MessageGroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageGroupReaction", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.MessagesInGroupMessage", "MessagesInGroupMessage")
                        .WithMany("MessageGroupReactions")
                        .HasForeignKey("MessagesInGroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("MessageGroupReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessagesInGroupMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageReaction", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.ChatMessage", "ChatMessage")
                        .WithMany("MessageReactions")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("MessageReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessagesInGroupMessage", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.ChatEntities.MessageGroup", "MessageGroup")
                        .WithMany("MessagesInGroupMessages")
                        .HasForeignKey("MessageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("MessagesInGroupMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.Participant", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.AdminGroup", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("AdminGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.Page", "Page")
                        .WithMany("AdminGroups")
                        .HasForeignKey("PageId");

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("AdminGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.GroupPost", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("GroupPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("GroupPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.JoinGroup", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("JoinGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.Page", "Page")
                        .WithMany("JoinGroups")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("JoinGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.MemberGroup", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("MemberGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.Page", "Page")
                        .WithMany("MemberGroups")
                        .HasForeignKey("PageId");

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("MemberGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.ModGroup", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.MuteMember", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.GroupEntities.Group", "Group")
                        .WithMany("MuteMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("MuteMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.NotificationEntities.Notification", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageAdmin", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.Page", "Page")
                        .WithMany("PageAdmins")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageComment", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.UserCommentPost", "Comment")
                        .WithMany("PageComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.PagePost", "PagePost")
                        .WithMany("PageComments")
                        .HasForeignKey("PagePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("PagePost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageLikeComment", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.UserReactComment", "UserLikeCommentPost")
                        .WithMany("PageLikeComments")
                        .HasForeignKey("UserLikeCommentPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLikeCommentPost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageLikePost", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.UserReactPost", "UserLikePost")
                        .WithMany("PageLikePosts")
                        .HasForeignKey("UserLikePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLikePost");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PageMod", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PageEntities.Page", "Page")
                        .WithMany("PageMods")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PagePost", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("PagePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.Albumn", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.Post", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.PostAlbumn", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Albumn", "Albumn")
                        .WithMany("PostAlbumns")
                        .HasForeignKey("AlbumnId");

                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("PostAlbumns")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Albumn");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.PostShare", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("PostShares")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("PostShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.TagUsersInPost", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("TagUsersInPost")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("TagUsersInPost")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserCommentPost", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("UserCommentPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserCommentPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserReactComment", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.UserCommentPost", "Comment")
                        .WithMany("UserReactComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserReactComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserReactPost", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.PostEntities.Post", "Post")
                        .WithMany("UserReactPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserReactPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.StoryEntities.ReactStory", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("ReactStory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.StoryEntities.Story", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.ConfirmEmail", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("ConfirmEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.FriendShip", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.FriendShipStatus", "FriendShipStatus")
                        .WithMany()
                        .HasForeignKey("FriendShipStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "UserTwo")
                        .WithMany()
                        .HasForeignKey("UserTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendShipStatus");

                    b.Navigation("UserTwo");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.Permission", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.RefreshToken", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.User", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserActivity", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserBlocked", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "UserBlock")
                        .WithMany("UserBlocked")
                        .HasForeignKey("UserBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBlock");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserDevice", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserFollower", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "UserFollowing")
                        .WithMany("UserFollowers")
                        .HasForeignKey("UserFollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFollowing");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserRelationship", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "RelatedUser")
                        .WithMany("UserRelationships")
                        .HasForeignKey("RelatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedUser");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserSession", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.UserViolate", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserViolates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReactStoryStory", b =>
                {
                    b.HasOne("LinkBuzz.Domain.Entities.StoryEntities.ReactStory", null)
                        .WithMany()
                        .HasForeignKey("ReactStoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkBuzz.Domain.Entities.StoryEntities.Story", null)
                        .WithMany()
                        .HasForeignKey("StoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.ChatMessage", b =>
                {
                    b.Navigation("ChatMessageParticipantStates");

                    b.Navigation("MessageReactions");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.Conversation", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessageGroup", b =>
                {
                    b.Navigation("MessageGroupMembers");

                    b.Navigation("MessagesInGroupMessages");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.MessagesInGroupMessage", b =>
                {
                    b.Navigation("MessageGroupReactions");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.ChatEntities.Participant", b =>
                {
                    b.Navigation("ChatMessageParticipantStates");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.GroupEntities.Group", b =>
                {
                    b.Navigation("AdminGroups");

                    b.Navigation("GroupPosts");

                    b.Navigation("JoinGroups");

                    b.Navigation("MemberGroups");

                    b.Navigation("MuteMembers");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.Page", b =>
                {
                    b.Navigation("AdminGroups");

                    b.Navigation("JoinGroups");

                    b.Navigation("MemberGroups");

                    b.Navigation("PageAdmins");

                    b.Navigation("PageMods");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PageEntities.PagePost", b =>
                {
                    b.Navigation("PageComments");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.Albumn", b =>
                {
                    b.Navigation("PostAlbumns");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.Post", b =>
                {
                    b.Navigation("GroupPosts");

                    b.Navigation("PagePosts");

                    b.Navigation("PostAlbumns");

                    b.Navigation("PostShares");

                    b.Navigation("TagUsersInPost");

                    b.Navigation("UserCommentPosts");

                    b.Navigation("UserReactPosts");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserCommentPost", b =>
                {
                    b.Navigation("PageComments");

                    b.Navigation("UserReactComments");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserReactComment", b =>
                {
                    b.Navigation("PageLikeComments");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.PostEntities.UserReactPost", b =>
                {
                    b.Navigation("PageLikePosts");
                });

            modelBuilder.Entity("LinkBuzz.Domain.Entities.UserEntities.User", b =>
                {
                    b.Navigation("AdminGroups");

                    b.Navigation("ChatMessages");

                    b.Navigation("ConfirmEmails");

                    b.Navigation("Conversations");

                    b.Navigation("GroupPosts");

                    b.Navigation("JoinGroups");

                    b.Navigation("MemberGroups");

                    b.Navigation("MessageGroupMembers");

                    b.Navigation("MessageGroupReactions");

                    b.Navigation("MessageReactions");

                    b.Navigation("MessagesInGroupMessages");

                    b.Navigation("MuteMembers");

                    b.Navigation("Notifications");

                    b.Navigation("Participants");

                    b.Navigation("Permissions");

                    b.Navigation("PostShares");

                    b.Navigation("ReactStory");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Stories");

                    b.Navigation("TagUsersInPost");

                    b.Navigation("UserActivities");

                    b.Navigation("UserBlocked");

                    b.Navigation("UserCommentPosts");

                    b.Navigation("UserDevices");

                    b.Navigation("UserFollowers");

                    b.Navigation("UserReactComments");

                    b.Navigation("UserReactPosts");

                    b.Navigation("UserRelationships");

                    b.Navigation("UserSessions");

                    b.Navigation("UserViolates");
                });
#pragma warning restore 612, 618
        }
    }
}
